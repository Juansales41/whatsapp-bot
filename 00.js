import pkg from 'whatsapp-web.js';
const { Client, LocalAuth } = pkg;

import qrcode from 'qrcode-terminal';
import nodemailer from 'nodemailer';
import { v4 as uuidv4 } from 'uuid';
import dotenv from 'dotenv';
import fs from 'fs';
import axios from 'axios'; // Para integra√ß√£o com APIs externas
import express from 'express'; // Para o painel de administra√ß√£o

// Carrega as vari√°veis de ambiente
dotenv.config();

// Caminho do arquivo de estado do usu√°rio
const userStateFilePath = './userState.json';

// Carrega ou inicializa o estado dos usu√°rios
let userState = {};
if (fs.existsSync(userStateFilePath)) {
    userState = JSON.parse(fs.readFileSync(userStateFilePath));
} else {
    fs.writeFileSync(userStateFilePath, JSON.stringify({}));
}

// Salva o estado dos usu√°rios no arquivo com tratamento de erro
function saveUserState() {
    try {
        fs.writeFileSync(userStateFilePath, JSON.stringify(userState, null, 2));
    } catch (error) {
        console.error('Erro ao salvar o estado do usu√°rio:', error);
    }
}

// Configura√ß√µes do cliente do WhatsApp
const client = new Client({
    puppeteer: {
        executablePath: 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe',
    },
    authStrategy: new LocalAuth(),
});

// Vari√°veis globais
const reportFilePath = './atendimentos.csv';
const supportedLanguages = ['pt', 'en']; // Idiomas suportados
let protocolNumber = 0; // N√∫mero do protocolo global

// Configura√ß√£o do transportador de e-mail para Outlook
const transporter = nodemailer.createTransport({
    host: 'smtp.office365.com',
    port: 587,
    secure: false,
    auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS,
    },
});

// Fun√ß√£o para obter sauda√ß√£o com base na hora do dia e idioma
function getGreeting(language = 'pt') {
    const hour = new Date().getHours();
    let greeting = {
        pt: { morning: 'Bom dia', afternoon: 'Boa tarde', night: 'Boa noite' },
        en: { morning: 'Good morning', afternoon: 'Good afternoon', night: 'Good evening' }
    };
    if (hour < 12) {
        return greeting[language].morning;
    } else if (hour < 18) {
        return greeting[language].afternoon;
    } else {
        return greeting[language].night;
    }
}

// Fun√ß√£o para salvar relat√≥rio
function saveReport(data) {
    const header =
        'Chat ID,Nome,Matr√≠cula,Op√ß√£o,Detalhes,Avalia√ß√£o,Data,C√≥digo,Status\n';
    const row = `${data.chatId},${data.name},${data.matricula},${data.opcao},${data.detalhes},${data.rating},${data.date},${data.code},${data.status}\n`;

    try {
        if (!fs.existsSync(reportFilePath)) {
            fs.writeFileSync(reportFilePath, header);
        }
        fs.appendFileSync(reportFilePath, row);
    } catch (error) {
        console.error('Erro ao salvar o relat√≥rio:', error);
    }
}

// Fun√ß√£o para enviar e-mail de relat√≥rio com fallback
function sendReportEmail() {
    const mailOptions = {
        from: process.env.EMAIL_USER,
        to: process.env.EMAIL_USER,
        subject: 'Relat√≥rio de Atendimento',
        text: 'Segue em anexo o relat√≥rio de atendimentos.',
        attachments: [{ filename: 'atendimentos.csv', path: reportFilePath }],
    };

    transporter.sendMail(mailOptions, (error, info) => {
        if (error) {
            console.error('Erro ao enviar e-mail:', error);
        } else {
            console.log('E-mail enviado:', info.response);
        }
    });
}

// Fun√ß√£o para gerar c√≥digo de atendimento
function generateTicketCode() {
    return `DP${uuidv4().split('-')[0].toUpperCase()}`;
}

// Fun√ß√£o para iniciar o timer do usu√°rio
function startUserTimer(user) {
    const timeoutDuration = user.invalidResponses >= 2 ? 5 * 60 * 1000 : 10 * 60 * 1000; // 5 minutos ap√≥s respostas inv√°lidas, 10 minutos caso contr√°rio
    user.timer = setTimeout(async () => {
        await client.sendMessage(
            user.chatId,
            '‚è≥ Ol√°! Estou aqui se precisar de algo. üòâ'
        );
    }, timeoutDuration);
}

// Fun√ß√£o para limpar o timer do usu√°rio
function clearUserTimer(user) {
    if (user.timer) {
        clearTimeout(user.timer);
        user.timer = null;
    }
}

// Fun√ß√£o de menu de ajuda
async function showHelp(chatId, language = 'pt') {
    const helpText = {
        pt: 'üìã Menu de ajuda:\n1Ô∏è‚É£ - Iniciar atendimento\n2Ô∏è‚É£ - Verificar status de protocolo\n3Ô∏è‚É£ - Cancelar atendimento\n4Ô∏è‚É£ - Falar com um atendente humano\n5Ô∏è‚É£ - Ver op√ß√µes dispon√≠veis',
        en: 'üìã Help Menu:\n1Ô∏è‚É£ - Start service\n2Ô∏è‚É£ - Check protocol status\n3Ô∏è‚É£ - Cancel service\n4Ô∏è‚É£ - Talk to a human agent\n5Ô∏è‚É£ - See available options',
    };
    await client.sendMessage(chatId, helpText[language]);
}

// Fun√ß√£o para integra√ß√£o com API externa
async function checkOrderStatus(chatId, orderId) {
    try {
        const response = await axios.get(`https://api.exemplo.com/pedido/${orderId}`);
        await client.sendMessage(chatId, `üì¶ Status do pedido ${orderId}: ${response.data.status}`);
    } catch (error) {
        console.error('Erro ao acessar API externa:', error);
        await client.sendMessage(chatId, '‚ö† Ocorreu um erro ao consultar o status do pedido. Tente novamente mais tarde.');
    }
}

// Fun√ß√£o para lidar com a resposta do usu√°rio
async function handleUserResponse(user, chatId, text) {
    switch (user.awaitingResponse) {
        case 'initial':
            await handleInitialResponse(user, chatId, text);
            break;
        case 'name':
            await handleNameResponse(user, chatId, text);
            break;
        case 'matricula':
            await handleMatriculaResponse(user, chatId, text);
            break;
        case 'opcao':
            await handleOpcaoResponse(user, chatId, text);
            break;
        case 'detalhes':
            await handleDetalhesResponse(user, chatId, text);
            break;
        case 'rating':
            await handleRatingResponse(user, chatId, text);
            break;
        case 'protocolo':
            await handleProtocoloResponse(user, chatId, text);
            break;
        case 'cancel':
            await handleCancelResponse(user, chatId);
            break;
        case 'help':
            await showHelp(chatId, user.language || 'pt');
            break;
        case 'order':
            await checkOrderStatus(chatId, text);
            break;
        default:
            await handleInvalidResponse(user, chatId);
    }
    saveUserState(); // Salva o estado atualizado ap√≥s cada resposta
}

// Fun√ß√£o para lidar com respostas inv√°lidas
async function handleInvalidResponse(user, chatId) {
    user.invalidResponses++;

    if (user.invalidResponses >= 3) {
        await client.sendMessage(chatId, '‚ö† N√£o consegui entender suas mensagens. Voc√™ gostaria de falar com um humano? Responda "sim" ou "n√£o".');
        user.awaitingResponse = 'talkToHuman';
    } else {
        await showHelp(chatId, user.language || 'pt');
    }
}

// Painel de administra√ß√£o b√°sico
const app = express();
app.use(express.json());

app.get('/admin/users', (req, res) => {
    res.json(userState);
});

app.get('/admin/reports', (req, res) => {
    if (fs.existsSync(reportFilePath)) {
        res.sendFile(path.resolve(reportFilePath));
    } else {
        res.status(404).send('Relat√≥rio n√£o encontrado');
    }
});

app.listen(3000, () => {
    console.log('Painel de administra√ß√£o dispon√≠vel em http://localhost:3000');
});

// Evento quando QR Code √© recebido
client.on('qr', (qr) => {
    qrcode.generate(qr, { small: true });
    console.log('QR RECEIVED', qr);
});

// Evento quando o cliente est√° pronto
client.on('ready', () => {
    console.log('Cliente est√° pronto! üéâ');
});

// Evento para receber mensagens
client.on('message', async (message) => {
    const chatId = message.from;
    const text = message.body.toLowerCase().trim();

    if (message.isGroupMsg) return; // Ignorar mensagens em grupos

    if (!userState[chatId]) {
        userState[chatId] = { awaitingResponse: 'initial', timer: null, invalidResponses: 0, language: 'pt' }; // Adiciona idioma padr√£o como 'pt'
        saveUserState(); // Salva o estado do usu√°rio no arquivo
        const greeting = getGreeting();
        await client.sendMessage(
            chatId,
            `${greeting}! Sou a IADP ü§ñ, sua assistente virtual. Como posso ajudar voc√™ hoje?\n\n1Ô∏è‚É£ - Iniciar atendimento\n2Ô∏è‚É£ - Verificar status de protocolo\n3Ô∏è‚É£ - Cancelar atendimento\nDigite "ajuda" para ver todas as op√ß√µes dispon√≠veis.`
        );
        return;
    }

    const user = userState[chatId];
    clearUserTimer(user);

    try {
        await handleUserResponse(user, chatId, text);
    } catch (error) {
        console.error('Erro ao processar a resposta do usu√°rio:', error);
        await client.sendMessage(
            chatId,
            '‚ö† Ocorreu um erro ao processar sua solicita√ß√£o. Por favor, tente novamente mais tarde.'
        );
    }
});

// Iniciar o cliente do WhatsApp
client.initialize();
